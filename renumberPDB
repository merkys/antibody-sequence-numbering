#!/usr/bin/perl

use strict;
use warnings;

use FindBin;
use Getopt::Long::Descriptive;
use List::Util qw( none );

use lib "$FindBin::Bin/modules";

use Structures::HMM_model;
use NumTools::IMGT qw(numberSeq);
use NumTools::Converter qw(convertImgt);
use IO::DataPrinter qw(generateStandartOut);
use IO::PDB::FormatDetector qw(detectFormat);
use IO::PDB::Parser qw(readPDB readMMCIF);
use IO::PDB::Exporter qw(renumberPDB);

my @supportedSchemes = qw( kabat chothia );

my( $opt, $usage ) = describe_options(
    'Renumber sequences in PDB files',
    [ 'scheme|s=s', 'numbering scheme', { default => 'kabat' } ],
    [ 'input|i=s', 'input file' ],
    [ 'fileType|t=s', 'input file type' ],
    [ 'help|h', 'print usage message and exit', { shortcircuit => 1 } ],
);

if( $opt->help ) {
    print $usage->text;
    exit;
}

if( none { $_ eq $opt->scheme } @supportedSchemes ) {
    local $" = ', ';
    die "scheme '" . $opt->scheme . "' is not supported, supported schemes: " .
        "@supportedSchemes\n";
}

my %supported_fix_mods = ( 'no_fit' => 1,
                           'fit'    => 1 );

my $numbering_scheme = $opt->scheme;
my $pdb_file = $opt->input;
my $file_type = $opt->filetype;
my $error_fix_mode = 'fit';

$file_type = detectFormat($pdb_file) if not $file_type;
die "Could not idetify file type $pdb_file: $!" if $file_type eq 'unknown';

my ($chains_ref, $sequences_ref) = $file_type eq 'cif'
                                  ? readMMCIF($pdb_file)
                                  : readPDB  ($pdb_file);

my @HMM_models;                      
for( my $i = 0; $i < @$sequences_ref; $i++ ) {
     my $custom_seq_ref = {id     => $chains_ref->[$i],
                           header => $chains_ref->[$i],
                           seq    => $sequences_ref->[$i]};
                           
     push @HMM_models, Structures::HMM_model->new( $custom_seq_ref );
}


my $is_filter_gaps = 1;
my @new_numbering;
for my $model (@HMM_models) {
    for my $seq ($model->getSequences) {
        my ($numbered_seq, $numbering_ref) = numberSeq( $seq, $error_fix_mode );
           ($numbered_seq, $numbering_ref) = convertImgt( $numbered_seq,
                                                          $seq->getDomain,
                                                          $numbering_scheme,
                                                          $is_filter_gaps );
        push @new_numbering, $numbering_ref;
    }
}

print renumberPDB( $pdb_file, $chains_ref, \@new_numbering );
