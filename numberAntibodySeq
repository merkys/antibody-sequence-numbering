#!/usr/bin/perl
use strict;
use warnings;
use Cwd;
use Getopt::Long;

use FindBin;
use File::Spec;
BEGIN {
    my @dirs = grep { -d $_ } glob(File::Spec->catdir($FindBin::Bin, 'modules', '*'));
    unshift @INC, "$FindBin::Bin/modules";
    for my $dir (@dirs)
    {
        unshift @INC, $dir;
    }
}

use File::Temp qw/ tempfile /;
use IO::FastaParser qw(readFasta);
use IO::Exporter qw(generateStandartOut);
use Structures::HMM_model;
use NumTools::IMGT qw(:ALL);
use NumTools::Converter qw(convertImgt);


sub usage
{
    die "usage\n";
}

my %supportedSchemes = ('imgt' => 1,
                        'kabat'=> 1,
                        'chothia'=> 1);

my ($numberingScheme, $seqFile, $outputFile);

GetOptions(
	"scheme|s=s" =>  \$numberingScheme,
	"output|o=s" => \$outputFile,
	"input|i=s" => \$seqFile,
) or usage();

$numberingScheme ||= 'imgt';

if(!$supportedSchemes{lc($numberingScheme)})
{
	warn "This scheme is not supported: $numberingScheme\n";
	print "Supported schemes:\n";
	die join("\n", keys %supportedSchemes), "\n";
}

my $fh = *STDIN;
if($seqFile)
{
	open($fh, '<', $seqFile)
		or die "Could not open file: $outputFile";
}
my @HMM_models;
{
	local $/ = "\n>";  
	while(my $record = <$fh>)
	{
		chomp $record;
		$record =~ s/^>//;
		my $seq_ref = readFasta($record);
		push @HMM_models, Structures::HMM_model->new($seq_ref);
	}

	close($fh) if $seqFile;
}


my $output = '';
my $convert_out ='';
for my $model (@HMM_models)
{
    my $seq = $model->getSequence();
    my ($numbered_seq, $numbering_ref) = getSeqNumbering($seq);
    if($numberingScheme ne 'imgt')
    {
        $numbered_seq, $numbering_ref = convertImgt($numbered_seq,
                                                    $seq->getDomain(),
                                                    $numberingScheme);
        $numbered_seq = join('', @$numbered_seq);
    }
    $output .= generateStandartOut($seq->getHeader(), $numbered_seq,
                                   $seq->getDomain(), $seq->getOrganism(),
                                   $numbering_ref);
}

my $out_fh = *STDOUT;
if($outputFile)
{
    open($out_fh, '>', $outputFile)
        or die "Could not open file: $outputFile";
}
print $out_fh $output;
close($out_fh) if $outputFile;

