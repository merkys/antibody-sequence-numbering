#!/usr/bin/perl

use strict;
use warnings;

use Cwd;
use Getopt::Long;
use FindBin;
use File::Spec;


BEGIN {
    my @dirs = grep { -d $_ } glob(File::Spec->catdir($FindBin::Bin, 'modules', '*'));
    unshift @INC, "$FindBin::Bin/modules";
    for my $dir (@dirs)
    {
        unshift @INC, $dir;
    }
}
use IO::FastaParser qw(readFasta);
use IO::DataPrinter qw(generateStandartOut);
use Structures::HMM_model;
use NumTools::IMGT qw(numberSeq);
use NumTools::Converter qw(convertImgt);


sub usage
{
    die "usage\n";
}

my %supportedSchemes = ( 'imgt'   => 1,
                         'kabat'  => 1,
                         'chothia'=> 1 );

my %supported_fix_mods = ( 'no_fit' => 1,
                           'fit'      => 1 );

my ($numberingScheme, $seqFile, $outputFile, $error_fix_mode, $is_filter_gaps);

GetOptions( "scheme|s=s"  => \$numberingScheme,
            "output|o=s"  => \$outputFile,
            "input|i=s"   => \$seqFile,
            "errFix|ef=s" => \$error_fix_mode,
            "filterGaps|fG=s" => \$is_filter_gaps) or usage();

$numberingScheme ||= 'imgt';
$error_fix_mode ||= 'fit';
$is_filter_gaps ||= 0;
if( !$supportedSchemes{lc($numberingScheme)} ) {
    die "scheme '$numberingScheme' is not supported, supported schemes: " .
        join( ', ', sort keys %supportedSchemes ) . "\n";
}

if( !$supported_fix_mods{lc($error_fix_mode)} ) {
    die "fix mode '$error_fix_mode' is not supported, supported modes: " .
        join( ', ', sort keys %supported_fix_mods ) . "\n";
}

my $fh = *STDIN;
if($seqFile)
{
    open($fh, '<', $seqFile)
        or die "Could not open file: $seqFile";
}
my @HMM_models;
{
    local $/ = "\n>";  
    while(my $record = <$fh>)
    {
        chomp $record;
        $record =~ s/^>//;
        my $seq_ref = readFasta($record);
        push @HMM_models, Structures::HMM_model->new($seq_ref);
    }

    close($fh) if $seqFile;
}


my $output = '';
for my $model (@HMM_models)
{
    for my $seq (@{$model->getSequences()})
    {
        my ($numbered_seq, $numbering_ref) = numberSeq($seq, $error_fix_mode);
        if($numberingScheme ne 'imgt')
        {
           ($numbered_seq, $numbering_ref) = convertImgt($numbered_seq,
                                                        $seq->getDomain(),
                                                        $numberingScheme,
                                                        $is_filter_gaps);
        }
        $output .= generateStandartOut($seq->getHeader(), $numbered_seq,
                                       $seq->getDomain(), $seq->getOrganism(),
                                       $numbering_ref);
    }
}

my $out_fh = *STDOUT;
if($outputFile)
{
    open($out_fh, '>', $outputFile)
        or die "Could not open file: $outputFile";
}
print $out_fh $output;
close($out_fh) if $outputFile;


