#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long::Descriptive;
use FindBin;
use List::Util qw( none );

use lib "$FindBin::Bin/modules";

use IO::FastaParser qw(readFasta);
use IO::DataPrinter qw(generateStandartOut);
use Structures::HMM_model;
use NumTools::IMGT qw(numberSeq);
use NumTools::Converter qw(convertImgt);

my @supportedSchemes = qw( imgt kabat chothia );
my @supported_fix_mods = qw( no_fit fit );

my( $opt, $usage ) = describe_options(
    'Antibody sequence numbering program',
    [ 'scheme|s=s', 'numbering scheme', { default => 'imgt' } ],
    [ 'input|i=s', 'input file' ],
    [ 'errFix|ef=s', 'error fixing mode', { default => 'fit' } ],
    [ 'filterGaps|fG=s', 'filter gaps?' ],
    [ 'help|h', 'print usage message and exit', { shortcircuit => 1 } ],
);

if( $opt->help ) {
    print $usage->text;
    exit;
}

if( none { $_ eq $opt->scheme } @supportedSchemes ) {
    local $" = ', ';
    die "scheme '" . $opt->scheme . "' is not supported, supported schemes: " .
        "@supportedSchemes\n";
}

if( none { $_ eq $opt->errfix } @supported_fix_mods ) {
    local $" = ', ';
    die "fix mode '" . $opt->errfix . "' is not supported, supported modes: " .
        "@supported_fix_mods\n";
}

my $fh = *STDIN;
if( defined $opt->input ) {
    open $fh, '<', $opt->input or die "Could not open file: " . $opt->input;
}
my @HMM_models;
{
    local $/ = "\n>";  
    while( my $record = <$fh> ) {
        chomp $record;
        $record =~ s/^>//;
        push @HMM_models, Structures::HMM_model->new( readFasta( $record ) );
    }

    close $fh if defined $opt->input;
}

my $output = '';
for my $model (@HMM_models) {
    for my $seq (@{$model->getSequences}) {
        my( $numbered_seq, $numbering_ref ) = numberSeq( $seq, $opt->errfix );
        if( $opt->scheme ne 'imgt' ) {
           ($numbered_seq, $numbering_ref) = convertImgt( $numbered_seq,
                                                          $seq->getDomain,
                                                          $opt->scheme,
                                                          $opt->filtergaps );
        }
        print generateStandartOut( $seq->getHeader,
                                   $numbered_seq,
                                   $seq->getDomain,
                                   $seq->getOrganism,
                                   $numbering_ref );
    }
}
