#!/usr/bin/perl

use strict;
use warnings;

use Cwd;
use Getopt::Long::Descriptive;
use FindBin;

use lib "$FindBin::Bin/modules";

use IO::FastaParser qw(readFasta);
use IO::DataPrinter qw(generateStandartOut);
use Structures::HMM_model;
use NumTools::IMGT qw(numberSeq);
use NumTools::Converter qw(convertImgt);

my %supportedSchemes = ( 'imgt'   => 1,
                         'kabat'  => 1,
                         'chothia'=> 1 );

my %supported_fix_mods = ( 'no_fit' => 1,
                           'fit'    => 1 );

my( $opt, $usage ) = describe_options(
    'Antibody sequence numbering program',
    [ 'scheme|s=s', 'numbering scheme', { default => 'imgt' } ],
    [ 'input|i=s', 'input file' ],
    [ 'errFix|ef=s', 'error fixing mode', { default => 'fit' } ],
    [ 'filterGaps|fG=s', 'filter gaps?' ],
    [ 'help|h', 'print usage message and exit', { shortcircuit => 1 } ],
);

if( $opt->help ) {
    print $usage->text;
    exit;
}

if( !$supportedSchemes{lc($opt->scheme)} ) {
    die "scheme '" . $opt->scheme . "' is not supported, supported schemes: " .
        join( ', ', sort keys %supportedSchemes ) . "\n";
}

if( !$supported_fix_mods{lc($opt->errfix)} ) {
    die "fix mode '" . $opt->errfix . "' is not supported, supported modes: " .
        join( ', ', sort keys %supported_fix_mods ) . "\n";
}

my $fh = *STDIN;
if( defined $opt->input ) {
    open $fh, '<', $opt->input or die "Could not open file: " . $opt->input;
}
my @HMM_models;
{
    local $/ = "\n>";  
    while(my $record = <$fh>)
    {
        chomp $record;
        $record =~ s/^>//;
        my $seq_ref = readFasta($record);
        push @HMM_models, Structures::HMM_model->new($seq_ref);
    }

    close($fh) if defined $opt->input;
}

my $output = '';
for my $model (@HMM_models)
{
    for my $seq (@{$model->getSequences()})
    {
        my ($numbered_seq, $numbering_ref) = numberSeq($seq, $opt->errfix);
        if($opt->scheme ne 'imgt')
        {
           ($numbered_seq, $numbering_ref) = convertImgt($numbered_seq,
                                                         $seq->getDomain(),
                                                         $opt->scheme,
                                                         $opt->filtergaps);
        }
        $output .= generateStandartOut($seq->getHeader(), $numbered_seq,
                                       $seq->getDomain(), $seq->getOrganism(),
                                       $numbering_ref);
    }
}

print $output;
