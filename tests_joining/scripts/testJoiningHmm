#!/usr/bin/perl
use strict;
use warnings;
use File::Temp qw(tempfile);

sub getAnarciNumberingInfo
{
	# Get variable region length based on ANARCI out file
	my ($file_name, $sub_seq_length) = @_;
	open(my $anarci_fh,'<', $file_name)
		or die " Could not open file: '$file_name' $!";
		
	my $anarciLength = <$anarci_fh>;
	chomp($anarciLength);
	$anarciLength =~ /#.+\s(\d+)/;
	my $length = $1;
	my @anarciSeq;
	while(my $line = <$anarci_fh>)
	{
		chomp($line);
		$line =~/([A-Z-])\t\d+/;
		push @anarciSeq, $1;
	}
	close($anarci_fh);
	return $length, @anarciSeq[-$sub_seq_length..-1];
}

sub readFasta
{
	my ($fasta_file) = @_;
	open(my $fasta_fh,'<', $fasta_file)
		or die " Could not open file: '$fasta_file' $!";
	
	my $fasta_header = <$fasta_fh>;
	chomp($fasta_header);
	my $fasta_seq = <$fasta_fh>;
	my @fasta_seq = split('', $fasta_seq);
	
	return $fasta_header, @fasta_seq;
}

my $hmm = $ARGV[0];
my $ANARCI_out_file = $ARGV[1];
my $fasta_file = $ARGV[2];

my $hmm_seatch_coomand = "hmmsearch --noali --domE 1e-5 $hmm $fasta_file";
my $grep_domain_info_command = 'grep -A 4 "Domain annotation for each sequence:"';
my $search_result = qx($hmm_seatch_coomand | $grep_domain_info_command | tail -n 1);
#print $search_result;

my @result = split(/\s+/, $search_result);
my ($envfrom, $envto) = ($result[13], $result[14]);

if($envfrom and $envto)
{
	my ($fasta_header, @fasta_seq) = readFasta($fasta_file);

	my @subsequence = @fasta_seq[($envfrom - 1) .. ($envto - 1)];
	my $sub_seq_length = scalar(@subsequence);
	my $subsequence = join("",@subsequence);

	my ($ANARCI_length, @sub_seq_anarci) =  getAnarciNumberingInfo($ANARCI_out_file, $sub_seq_length);
	my $anarci_sub_seq = join("",@sub_seq_anarci);
	
	my ($fasta_fh, $tmp_fasta) = tempfile(SUFFIX => '.fasta');
	
	print $fasta_fh ">MySubSeq\n$subsequence\n";
	print $fasta_fh ">AnarciSubSeq\n$anarci_sub_seq\n";
	close($fasta_fh);
	
	#print ">MySubSeq\n$subsequence\n";
	#print ">AnarciSubSeq\n$anarci_sub_seq\n";
	
	my ($afa_fh, $tmp_alignment) = tempfile(SUFFIX => '.afa');
	close $afa_fh;
	qx(mafft $tmp_fasta > $tmp_alignment);
	open my $result_fh, '<', $tmp_alignment
		or die "Could not open file: '$tmp_alignment' $!";
	
	my $myHeader = <$result_fh>;
	my $mySeq = <$result_fh>;
	my $anarciHeader = <$result_fh>;
	my $anarciSeq = <$result_fh>;
	close ($result_fh);
	my $alignment_length = length($mySeq);
	my @mySeq = split("",$mySeq);
	my @anarciSeq = split("",$anarciSeq);
	my $mismatches =0;
	for(my $i =0; $i<$alignment_length; $i++)
	{
		$mismatches++ if $mySeq[$i] ne $anarciSeq[$i];
	}
	
	print $mismatches;
	
	unlink $tmp_fasta;
	unlink $tmp_alignment;
}
